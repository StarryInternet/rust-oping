var searchIndex = {};
searchIndex["rustping"] = {"doc":"","items":[],"paths":[]};
searchIndex["oping"] = {"doc":"# oping library bindings","items":[[3,"Ping","oping","A `Ping` struct represents the state of one particular ping instance:\nseveral instance-wide options (timeout, TTL, QoS setting, etc.), and\na list of hostnames/addresses to ping. It is consumed when a single set\nof ping packets are sent to the listed destinations, resulting in an\niterator over the responses returned.",null,null],[3,"PingIter","","An iterator over ping responses. Will return one `PingItem` for each\ndestination that was added to the `Ping` context.",null,null],[3,"PingItem","","One ping response from a destination that was added to the `Ping` context.",null,null],[12,"hostname","","The hostname as resolved by the library, possibly resolved to a more\ncanonical name.",0,null],[12,"address","","The address as resolved by the library, either IPv4 or IPv6, in textual\nform.",0,null],[12,"family","","The address family (IPv4 or IPv6) used to ping the destination.",0,null],[12,"latency_ms","","The latency of the response, if any, in milliseconds.",0,null],[12,"dropped","","The dropped-packet count: either 0 or 1.",0,null],[12,"seq","","The sequence number of the ping.",0,null],[12,"recv_ttl","","The TTL on the received response.",0,null],[12,"recv_qos","","The QoS (quality of service) field on the received response.",0,null],[4,"AddrFamily","","Address family (IPv4 or IPv6) used to send/receive a ping.",null,null],[13,"IPV4","","",1,null],[13,"IPV6","","",1,null],[4,"PingError","","An error resulting from a ping option-setting or send/receive operation.",null,null],[13,"LibOpingError","","A `liboping` internal error",2,null],[13,"NulByteError","","A `std::ffi::NulError` that occurred while trying to convert a hostname string",2,null],[6,"PingResult","","",null,null],[11,"eq","","",1,{"inputs":[{"name":"addrfamily"},{"name":"addrfamily"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"addrfamily"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"addrfamily"}],"output":{"name":"addrfamily"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"addrfamily"}}],[11,"fmt","","",2,{"inputs":[{"name":"pingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"pingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"pingerror"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"pingerror"}],"output":{"name":"option"}}],[11,"drop","","",3,{"inputs":[{"name":"ping"}],"output":null}],[11,"new","","Create a new `Ping` context.",3,{"inputs":[],"output":{"name":"ping"}}],[11,"set_timeout","","Set the timeout, in seconds, for which we will wait for replies from\nall listed destinations.",3,{"inputs":[{"name":"ping"},{"name":"f64"}],"output":{"name":"pingresult"}}],[11,"set_ttl","","Set the TTL to set on the ping packets we send. Note that if a packet\nis sent with a TTL that is too low for the route, it may be dropped.",3,{"inputs":[{"name":"ping"},{"name":"i32"}],"output":{"name":"pingresult"}}],[11,"set_addr_family","","Set the preferred address family to use: IPv4 or IPv6.",3,{"inputs":[{"name":"ping"},{"name":"addrfamily"}],"output":{"name":"pingresult"}}],[11,"set_qos","","Set the value of the &quot;quality of service&quot; field to use on outgoing\nping packets.",3,{"inputs":[{"name":"ping"},{"name":"u8"}],"output":{"name":"pingresult"}}],[11,"add_host","","Add a ping destination. `hostname` may be a hostname to look up via\nthe system&#39;s name resolution (DNS, etc), or a numeric IPv4 or IPv6\naddress.",3,{"inputs":[{"name":"ping"},{"name":"str"}],"output":{"name":"pingresult"}}],[11,"remove_host","","Remove a destination that was previously added. If the hostname does\nnot match one that was added previously, an error will be returned.",3,{"inputs":[{"name":"ping"},{"name":"str"}],"output":{"name":"pingresult"}}],[11,"send","","Sends a single ping to all listed destinations, waiting until either\nreplies are received from all destinations or the timeout is reached.\nReturns an iterator over all replies.",3,{"inputs":[{"name":"ping"}],"output":{"name":"pingresult"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"pingitem"}}],[11,"fmt","","",0,{"inputs":[{"name":"pingitem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"pingitem"}],"output":{"name":"pingitem"}}],[11,"next","","",4,{"inputs":[{"name":"pingiter"}],"output":{"name":"option"}}]],"paths":[[3,"PingItem"],[4,"AddrFamily"],[4,"PingError"],[3,"Ping"],[3,"PingIter"]]};
initSearch(searchIndex);
